[*
   $ENV{__EMB_EXTRATITLE}="Installation";
   $ENV{__EMB_COUNT}++; 
   if (1==$ENV{__EMB_COUNT}) {
      Execute('base.epl');
   } else {

*]

<H2>On the placement of perl auxilliary files and configurations</H2>

<p>For  testing  one  of the scripts with dependencies, it  should  be
sufficient  to place any required components in the same directory  as
the  script  itself and add that script to $PATH. This also works  for
configuration files.</p>

<p class=anno>I'm a bit of a believer of selfcontained scripts, so I'm
slightly dissatisfied with the Install-Kitchensink-Approach to finally
run  a  tool  that  uses the kitchensink  but  degenerated  into  mere
argument  handling.  Still,  you sometimes have a bit  of  non-trivial
reusable code that doesn't seem right for reuse-at-external-tool-level
(e.g. Grep.pm, or lock.pl and Flock.pm).</p>

<p  class=anno>In the old days, that meant a 'do "$0.FILE";' to  allow
placing  the library file into the same dir as the tool (my early 90's
perl4/perl5 db_cgi.pl grab bag comes to mind). A no-hassles approach I
still like for configuration files.</p>

<p  class=anno>Nowadays I'm keeping the module collection in a  subdir
below the tools, but I've some code in any module-using perl script to
retain  a  bit  of  flexibility  in  the  placement  of  the  modules:
&lt;same-directory&gt;,  ~/bin,  ~/bin/perl, ~/bin/perl/Compact,  with
the  module  now  being invoked by it's relative  name:  'use  Flock;'
instead of the proper 'use Compact_pm::Flock' which requires a placing
Flock.pm in a Compact_pm dir in some directory in @INC).</p>

[* } *][# MUST BE AT EOF! #]
