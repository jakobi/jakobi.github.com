[*
   $ENV{__EMB_EXTRATITLE}="Shell Functions and Setup";
   $ENV{__EMB_COUNT}++; 
   if (1==$ENV{__EMB_COUNT}) {
      Execute('base.epl');
   } else {
*]

<p>This section is home of shell support functions and shell setup.</p>

<p>Note  that  the  korn shell ksh 93s+ suffers  from  various  memory
management  issues  on  64bit  incl.  eating  return  codes  (possibly
restricted  to x86_64, Linux and the January08 AST release) for Ubuntu
intrepid,  jaunty and Centos 5.3. Karmic will be the May09 AST release
and    has    a    ksh93t+   that   plays   nice    on    64bit    (<a
HREF="http://bazaar.launchpad.net/~ubuntu-branches/ubuntu/karmic/ksh"><tt>bzr
branch lp:ubuntu/karmic/ksh</tt></a>, there doesn't seem to be a PPA).
If  you're affected, the quickest fix is probably placing the official
standalone ksh binary early in your PATH (this one doesn't require the
remainder         of         the        AST         stuff):         <a
href="http://www.research.att.com/~gsf/cgi-bin/download.cgi?action=list&name=ksh">
http://www.research.att.com/~gsf/cgi-bin/download.cgi?action=list&name=ksh</a>)</p>



<H3>Some of the more interesting functions</H3>

<p><a href="http://github.com/jakobi/script-archive/tree/master/cli.shell.functions/">Git
    View of this section / Download</a></p>


<ul>
   <li>cd: portable version of <b>nico_cd</b> for bash and ksh (<i>NOT pd-ksh and derivatives; 
       try looking for e.g. ksh93 instead</i>) - 
       a proper directory stack with the ability to grep and edit the stack 
       (cd.nico_cd_for_bash_and_ksh.func)
   <li>cd: an extension of Halchenko's <B>dyndirstack</b> - a dynamic dirstack building
       upon the bash builtins with completion support (cd.dyndirstack_bash.func)
   <li>cd: see also <b>mt_dir</b> elsewhere in this archive (key-word based cd aliases)
   <li><b>_echo, _warn</b> (bash actually manages to have no echo/print honoring -- as end-of-options-option;
       the only reasonably safe function happens to be printf; 00_lib.func)
   <li><b>f2a</b> is a shell function reading a file into an array, allowing
       e.g. safe argument passing (00_lib.func):<BR>
       <tt>ksh93$      find . -print | f2a -a ARGS; less "$ARGS[@]"</tt><BR>
       <tt>bash$&nbsp; f2a -a ARGS < <(find . -print); less "$ARGS[@]"</tt>
   <li><b>uniqpath</b> deals with :-separated strings and removes duplicates and 
       optionally '.' and '' (both of which are a security risk e.g. in $PATH; 00_lib.func)
</ul>


[*}*][# MUST BE AT EOF! #]
