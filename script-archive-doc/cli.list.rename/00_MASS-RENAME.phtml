[*
   $ENV{__EMB_EXTRATITLE}="Mass-Renaming Files";
   $ENV{__EMB_COUNT}++; 
   if (1==$ENV{__EMB_COUNT}) {
      Execute('base.epl');
   } else {
*]

<p>This  toolbox compartment offers two tools for mass renaming files,
both of which also offer UNDO-logging, link target editing and more.</p>

<p>One  allows  for  way too much configurability/perl evals  with  an
optional  interactive  mode  that  acts  on  each  file  independently
(<B>myrename</B>),  while  the other shows all files at once  in  your
favorite editor (<B>emv</b>). If the task is repetitive, use myrename;
if  you  need to do it all the time, pre-define a small perl scrap  in
myrename.cfg and just say myrename &lt;NAME-OF-SCRAP&gt; FILES. If you
want  to see all the files at once and want to think about their names
while  editing  and  changing whole groups of files, use  emv  instead
(when  using  vim, do read up on g//p, sort, regex and visual  blocks;
emv thrives and wilts with the capability of the editor invoked).</P>

<p>For  an  interesting  German article on the  gestation  of  Torsten
Scheck's  original emv shell version (starting indeed with the initial
pre-emv  recipe of <tt>ls ...; paste -d ...; source ...</tt>), see  <a
href="http://www.pro-linux.de/berichte/appfokus/emv/emv.html">his
Pro-Linux          article         from         2006.</a>          (<a
href="http://translate.google.com/translate?tl=en&sl=de&u=http%3A%2F%2Fwww.pro-linux.de%2Fberichte%2Fappfokus%2Femv%2Femv.html">Google's
quite  readable attempt at machine translation</a>). The perl  version
should  be  strictly a superset of the 1.95 shell version, so  all  of
Torsten's  points are still valid, with the sole exception that during
editing  you need to allow for the line number column, thus increasing
emv's  dependency on a suitably powerful editor. Torsten also includes
an  overview  of other options including native shell, perl's  prename
and  mmv.  The  only  additions I can think  of  would  be  bash/ksh93
variable  content editing <tt>${VAR##...}</tt> (bash: use <tt>shopt -s
extglob</tt>  to  turn on regex support in globs) and on the GUI  side
say  gprename  or krename, which demonstrate that a properly  designed
application  <i>can</i> offer a clean GUI <i>without succumbing to the
usual  GUI trap of severely crippling the functionality</i>. But  even
apps  like  gprename do profit from a user spending a bit of  time  to
learn her shell globs and regular expressions.</p>

<p>See also GREP.xchange, which is somewhat similar:</p>
<ul>
   <LI>file list -&gt; grep output
   <LI>mass-rename    -&gt; mass edit
   <LI>ls -1d FILES | emv - -&gt; grep FILES | pipe.vim | Grep.xchange
</ul>

<H3>Commands</H3>

<p><a href="http://github.com/jakobi/script-archive/tree/master/cli.list.rename/">Git
    View of this section / Download</a></p>


<ul>
   <li><B>emv</B> (perl) - edited mv: two pass renaming, link creation, 
      file list splitting, link target editing (use e.g. 
      GNU find -type l -xtype l | emv -); quite capable when used with 
      the vim editor's visual block changes. Can also be used non-interactively by
      providing a perl expression for renaming files. Use  <b>emxv</b>
      to "grow" a session e.g. by listing subdirectories.
      (You may wish to set EMVSHELL to a Bourne-style shell that supports 
      set -o pipefail). Published on <a href="http://freshmeat.net/projects/emv">freshmeat</a> 
      and as <a href="http://www.vim.org/scripts/script.php?script_id=2767">vimscript#2767</a>
   <li><B>myrename</b> (perl): mass renaming using a perl expression like 
      e.g. s/old/new/, also allowing for predefined actions and extensive 
      user customization of actions, e.g. things like <tt>myrename lc</tt> to lowercase 
      all files that match the shell pattern *. With <tt>myrename '$l=~s/foo/bar' FILES</tt>,
      all links with matching link targets are modified. Way too many evaluation hooks for
      customization. Features a basic interactive mode. A configuration example
      is also provided.
</ul>

<p>Other commands:</p>

<UL>
   <li><B>emvs</B>, a helper to sort filelists but keeping directories and
      contents always together, temporarily remapping / to \0.
   <li><b>myrename.mangle</B>: parse filelists using shell quoting rules and encode/decode
      names for e.g. sorting; from whitespace elimination to url-style-encoding.
   <li><b>myrename.quote</B>: allow the use of the quoting routines from emv/myrename 
        for quoting a list of filenames.
</ul>

[*}*][# MUST BE AT EOF! #]
