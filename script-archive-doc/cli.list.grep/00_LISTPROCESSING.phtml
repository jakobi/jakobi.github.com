[*
   $ENV{__EMB_EXTRATITLE}="List Processing";
   $ENV{__EMB_EXTRAMETA}="cat0: converting from and to null-terminated lines. Grep.pm, Grep.xchange, expansyn: grep with synonym expansion and text replacement/substitution";
   $ENV{__EMB_COUNT}++; 
   if (1==$ENV{__EMB_COUNT}) {
      Execute('base.epl');
   } else {
*]

<p>This  toolbox compartment contains the heavy lifting tools for generic
pipeline 'line'-based text processing.</p>

<H3>Commands</H3>

<p><a href="http://github.com/jakobi/script-archive/tree/master/cli.list.grep/">Git
    View of this section / Download</a></p>


<ul>
   <li><B>cat0</B> converts from and to \0-terminated lines. Depending on
      invocation it's either a glorified but faster to type
      <tt>perl -ne 'chomp; print "$_\0"'</tt> or a <tt>perl -0ne 's/\0\z//; print "$_\n"'</tt>.
      The GNU tools grep [-z|-Z], sort -z, xargs -0 already provide support. nl0 
      reimplements a primitive nl with support, and xargs0 merely
      exists to allow faster typing of <tt>...| cat0|xargs0</tt>: This allows
      me to forget about IFS, quoting and whitespace in filenames and still have a
      well-behaved xargs doing the 'right thing' (provided you don't insist 
      on using  file names with embedded '\n').
   <li><B>cat0par</B> converts paragraphs into \0 lines and also allows for 
      arbitrary regex-based splitting. An overgrown <tt>perl --0ne/perl -0777ne</tt>.
   <li><B>Grep.pm</B> is a fork of tcgrep, which nowadays has learned about context,
       matching from start or end of file (line count or byte count), size limits,
       and highlighting. It extends matching to boolean expressions structuring 
       regular expressions or even arbitrary perl scraps. It can perform basic
       stemming and synonym-expansion in regular expressions (using expansyn). 
       It also handles \0-lines, paragraphs and file slurping, as well as
       directory recursion and compressed files (both as in tcgrep). Dependencies: expansyn.
       It can masquerade as a perl module. Published on
       <a href="http://freshmeat.net/projects/Grep.pm">freshmeat</a> (together
       with Grep.xchange).
   <li>How about a kind of emv not for mass-renaming filenames, but for
       mass-editing file-contents?<BR>
       <B>Grep.xchange</B> bridges the gap between the grep and patch commands:
       it takes grep output and a perl expression
       and uses both to change an arbitrary number of files by applying
       the expression at each of the grep matches, while
       generating a <i>patch file</i> as its <i>UNDO / REDO log</i>.
       It's a bit paranoid, so combined with edited grep output 
       (or Grep.pm -C -LINES <i>marked grep context output</i>),
       the 3-Step <B>Grep.pm|vim.pipe|Grep.xchange</B> is a rather safe way to 
       mass-edit files.  Dependencies: For flock-locking edited files, you also need to copy
       Compact_pm::Flock.pm; otherwise you can disable it by commenting the use statement. 
   <li><b>expansyn</b> is the command implementing basic English stemming and synonym
       expansion for both <B>Grep.pm</B> / <B>tagls</B>. It uses a configuration file expansyn.cfg 
       containing the synonymlists in perl syntax. I wrote it for 
       automatic expansion of some computer science terms I
       always seem to use in parallel.
</ul>

<p>See also:</p>
<ul>
   <li><a href="../cli.backup/00_BACKUP.html"><b>expanfind</b></a> offers something
       roughly similar to stemming or tagging for filelists, based on list contents
       or filesystem contents
   <li><a href="../cli.shell.functions/00_SHELL_SETUP.html"><b>f2a</b></a>
       in 00_lib.func: a shell function reading a file into an array:<BR>
       <tt>ksh93$      find . -print | f2a -a ARGS; less "$ARGS[@]"</tt><BR>
       <tt>bash$&nbsp; f2a -a ARGS < <(find . -print); less "$ARGS[@]"</tt>
   <li><a href="../vim/00_VIM.html"><b>pipe.vim (aka vimpipe) , vimless</b></a> 
       to run vim in the middle of a pipe or
       as a less replacement. Both are in the vim section.
   <li><i>Alternatives for automatic mass file editing</i> are also the usual suspects:
       stream editors from sed to perl -i.bak and the perl ped script, 
       <a href="../admin.text/00_ADMIN_TEXT.html"><b>selectlines</b></a>, 
       <a href="../cli.list.various/00_LISTPROCESSING2.html"><b>xchange.pl</b></a>
       (both in this archive),
       upto full-featured administration tools like cfengine
       with their support to modify or generate configuration files. At the beginning 
       of Grep.xchange you also find two <b>interative perl one-liner</b> examples that
       interactively ask before each substitution. 
</ul>


[*}*][# MUST BE AT EOF! #]
