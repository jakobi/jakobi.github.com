[*
   $ENV{__EMB_EXTRATITLE}="List Processing";
   $ENV{__EMB_COUNT}++; 
   if (1==$ENV{__EMB_COUNT}) {
      Execute('base.epl');
   } else {
*]

<p>This  toolbox compartment contains the heavy lifting tools for generic
pipeline 'line'-based text processing.</p>

<H3>Major Commands</H3>

<ul>
   <li><B>cat0</B> converts from and to \0-terminated lines. Additional wrappers 
      implementing support for this format: nl0. The GNU tools, grep, sort, 
      xargs already support this format, thus I've not yet needed/created a
      sort0; and xargs0 is still just a glorified exec to reduce typos. 
      As for grep, I'd prefer Grep.pm -0 below.
   <li><B>cat0par</B> converts paragraphs into \0 lines and also allows for 
      arbitrary regex-based splitting. An overgrep perl --0ne/perl -0777ne.
   <li><B>Grep.pm</B> is a fork of tcgrep, which nowadays has learned about context,
       matching from start or end of file (line count or byte count), size limits,
       and highlighting. It extends matching to boolean expressions structuring 
       regular expressions or even arbitrary perl scraps. It can perform basic
       stemming and synonym-expansion in regular expressions (using expansyn). 
       It also handles \0-lines, paragraphs and file slurping, as well as
       directory recursion and compressed files (both as in tcgrep). Dependencies: expansyn.<BR>
       It can masquerade as a perl module. As the module rewrite is a bit fresh and
       some ancient boxes might have "older" perl installations, this dir
       also contains older perlish greps: rgrep0 (an earlier version of
       Grep.pm), a current tcgrep, and hlgrep (both small fixes; hlgrep
       is probably the most simple and likely to work an ancient systems). 
   <li>How about a kind of emv not for mass-renaming filenames, but 
       for mass-editing file-contents? If <B>Grep.xchange</B> is given (edited)
       grep output, it applies a corresponding perl expression at each
       match location in the specified files. It's a bit paranoid, but combined
       with editing grep output (or Grep.pm -C -LINES <i>marked grep context output</i>),
       the 3-Step <B>Grep.pm|vim.pipe|Grep.xchange</B> is a fairly safe way to 
       mass-edit files. See comments for two example perl one-liners that interactively
       ask before each substitution. See also the ancient <b>xchange.pl</b>. Depenencies: 
       For flock-locking edited files, you also need to copy Compact_pm::Flock.pm; otherwise you can disable
       it by commenting the use statement. 
   <li><b>expansyn</b> is the command implementing basic English stemming and synonym
       expansion for Grep.pm / tagls using a configuration file expansyn.cfg 
       containing the synonymlists in perl syntax. It's mostly intended
       to allow automatic expansion of some computer science terms I
       always seem to use in parallel.
</ul>

<p>See also:</p>
<ul>
   <li><b>f2a</b> in 00_lib.func: a shell function reading a file into an array:
       find . -print | f2a -a ARGS; less "$ARGS[@]" 
   <li><b>pipe.vim (aka vimpipe) , vimless</b> to run vim in the middle of a pipe or
       as a less replacement. Both are in the vim section.
</ul>


[*}*][# MUST BE AT EOF! #]
