[*
   $ENV{__EMB_EXTRATITLE}="System-Administration / Editing";
   $ENV{__EMB_COUNT}++; 
   if (1==$ENV{__EMB_COUNT}) {
      Execute('base.epl');
   } else {
*]

<p>Most  of  the stuff is too specific. Otherwise the stuff's  waiting
for a rewrite before being again (while hoping to stay retired, when a
suitable group-maintained pendant is can be found).</p>

<p>sfre  is  a  slightly different case, it's an  itch  from  previous
projects,  where being unable to ask (night-time, holidays,  whatever)
lead  to time-consuming double-checks. Now wouldn't it be nice to find
such   information   about   already  execute   tasks,   changes   and
modifications  in  a single location on the system in  question?  Note
that  sfre substitutes for a versioning system or a tool like cfengine
only  in the most trivial of cases, it's real purpose is to complement
proper  system  management tools, and in addition provide a  fail-safe
for those dusty corners where use of proper tools like cfengine hasn't
been  implemented yet.</p>

<p><i>I'm currently using sfre as $EDITOR, $VISUAL
and  as a replacement for vi (albeit with a call to the real vi  later
on); it's quite painful to be asked all the time for sane log messages
when opening a vi without files or doing a git commit. This translates
into  a growing list of changes like implementing a command  blacklist
for file locking and journaling. For now it's still a bit too annoying
to be used for accounts other than root.</i></p>


<H3>Commands</H3>

<ul>
   <li><b>selectlines</b> , a version of the classic to select/deselect lines according
       to embedded directives, while copying the sourcefile. Useful for trivial cases,
       provided you switch to more suitable tools for heavier lifting.
   <li><B>systemflightrecorderedit (sfre)</B> - sfre tries to sequence file 
      edits and augment group memory in  concurrent  file change scenarios like
      multiple root users plus cron jobs. For each edit (or more generally
      any arbitrary command given with the -e option) sfre logs a description
      to a journal, f-locks the plain file arguments of the  command and uses
      changetrack to backup changes. It also supports lookup/diff of files
      from a changetrack backupdir by date, revision number or symbolic name 
      allowing all options of the cat or diff commands (e.g. all GNU diff 
      options instead of just the small subset of options available via rcsdiff).<BR>
      Dependencies: changetrack (changetrack.sf.net) and lock.pl/Flock.pm.
   <li><B>unescape.pl</b> strips some of the line noise from script typescripts.
      Modified version with prompt guessing, tries to remove e.g. vim session.
      Using a tool like this may make typescripts somewhat more usable as a base
      for documentation. 
</ul>

<p>See also:</p>
<ul>
   <li>vimsh as helper for system documentation / documentation creation taken
      from session transcripts: see the vimsh script from vim.org for a non-typescript
      approach (non-interactive commands only, unless you use some kind
      of pty splitter in combination with say urxvt -pty or screen; I've a demo
      of both, but first I want to patch some more comfort into vimsh for this kind of usage).
</ul>

[*}*][# MUST BE AT EOF! #]
