#!/bin/sh

#!perl # -Sx: line count is one off; -w: tested.
eval 'exec perl -Sx $0 ${1:+"$@"}'
   if 0;

# diff the contents of two html pages, assuming different tags and layout

# 1996XXXX PJ   0.1  jakobi@acm.org initial version
# 19971202 PJ        
# 20000703 PJ   0.2 
# copyright:  (c) 1996-2009 jakobi@acm.org, GPL v2 or later
my $version="0.2";


# last update: jakobi@acm.org 2dec97

# related tools: spiff, wdiff (doesn't know html)

undef $/;
$lynxargs="-width=1000 -dump -force_html -nolist";
$linenoprefix="DIFFLINENO";
$lynx=1;
$diffcmd="gdiff --text -0 -b -B -I '$linenoprefix'"; # skip whitespace changes
chop($h=`hostname`); # $lynxargs.=" -nolist" if $h eq "kefk";
chop($date=`date +%y%m%d%H%M%S`);
$tmp="/tmp/htmldiff.$date";
#@partags= qw/ BR P HR H\d TR TD TABLE LI CENTER DIV/; # BR is expanded itself. take care!
#$partags= '(BR|P|HR|H\d|TR|TD|TH|TABLE|LI|CENTER|DIV)';
$partags= '(BR|P|HR|H\d|TR|TABLE|LI|CENTER|DIV)';
$spacetags= '(TD|TH)';
$boundary='[\[\]{}\(\)\s\.,;!\?]'; 
$step=20;


args: while(1) {
   if    ($ARGV[0] eq '-'){ shift @ARGV; last args; } 
   elsif ($ARGV[0] eq '-v'){ shift @ARGV; $verbose=1; }
   elsif ($ARGV[0] eq '-k'){ shift @ARGV; $keep=1; }
   elsif ($ARGV[0] eq '-w'){ shift @ARGV; $word=1; }
   elsif ($ARGV[0] eq '-D'){ shift @ARGV; $diff+=2; }
   elsif ($ARGV[0] eq '-d'){ shift @ARGV; $diff+=1; }
   elsif ($ARGV[0] eq '-q'){ shift @ARGV; $brief+=1; }
   elsif ($ARGV[0] eq '-s'){ shift @ARGV; $step=shift; }
   elsif ($ARGV[0] eq '-Q'){ shift @ARGV; $lynx=0; }
   elsif ($ARGV[0] eq '-skipdate'){ shift @ARGV; $skipdate=1; $skipdateprefix=shift @ARGV; }
   elsif ($ARGV[0] eq '-h'){ shift @ARGV; &help(); exit; }
   else { last args; }
}


$filename1=$ARGV[0]; open (FH, $filename1); $file1=<FH>; shift @ARGV;
$filename2=$ARGV[0]; open (FH, $filename2); $file2=<FH>; shift @ARGV;

# transform line ends, maybe transform/unify umlauts?
$file1=~s/\n\x0d/\n/go;
$file1=~s/\x0d/ /go;
$file2=~s/\n\x0d/\n/go;
$file2=~s/\x0d/ /go;

# linenumbering
$lineno=0; $file1=~s@(.*)\n@do { ++$lineno; $line=$1; $line=~/[a-z]/i ? "[$linenoprefix:$lineno] $line\n" : "$line\n" }@gmeo;
$lineno=0; $file2=~s@(.*)\n@do { ++$lineno; $line=$1; $line=~/[a-z]/i ? "[$linenoprefix:$lineno] $line\n" : "$line\n" }@gmeo;

# VRG-Hyperbuch-specific treatment: remove header and footer
#$file1="<HTML><BODY>".$'   if $file1=~/<!--\s+\/LINKINGHEAD\s[\s\S]*?-->/;
#$file1=$`."</BODY></HTML>" if $file1=~/<!--\s+LINKINGTAIL\s[\s\S]*?-->/;
# 60k limits!
$file1=~s/^[\s\S]+?<!--\s+\/LINKINGHEAD\s[\s\S]*?-->/<HTML><BODY>/;
$file1=~s/<!--\s+LINKINGTAIL\s[\s\S]*?-->[\s\S]*$/<\/BODY><\/HTML>/;
$file2=~s/^[\s\S]+?<!--\s+\/LINKINGHEAD\s[\s\S]*?-->/<HTML><BODY>/;
$file2=~s/<!--\s+LINKINGTAIL\s[\s\S]*?-->[\s\S]*$/<\/BODY><\/HTML>/;
# skip wwwoffle proxy modifications
$file1=~s@</?font.*?>@@mgsio;
$file2=~s@</?font.*?>@@mgsio;
$file1=~s@<!-- This section is added by WWWOFFLE -->.*?<!-- This section is added by WWWOFFLE -->@@mgsio;
$file2=~s@<!-- This section is added by WWWOFFLE -->.*?<!-- This section is added by WWWOFFLE -->@@mgsio;



# expand paragraph endings/beginnings
if (not $brief) {
   # this may be SLOW!
   $file1=~s/(<\/?$partags)(?=\s|>|\/)/<BR><BR>$1/gio;
   $file2=~s/(<\/?$partags)(?=\s|>|\/)/<BR><BR>$1/gio;
}

#print main::STDERR "prepared for dump\n";

# get the text dump
if ($lynx and not $brief) {
   open(FH, ">$tmp.a1"); print FH $file1; close FH;
   open(FH, ">$tmp.a2"); print FH $file2; close FH;
   open(FH, "lynx $lynxargs $tmp.a1 |"); $file1=<FH>; 
   open(FH, "lynx $lynxargs $tmp.a2 |"); $file2=<FH>; 
#print main::STDERR "text dump finished\n";
}
 

# strip known automatic timestamps 
$file1=~s/^[<>]?\s*(Collection g|G)enerated on.*//mgo;
$file2=~s/^[<>]?\s*(Collection g|G)enerated on.*//mgo;


# delete date strings, ... (move this before the lynx dump?)
if ($skipdate) {
   $b='[^\w\-\+]';
   # last update
   $file1=~s/(last|letzter?s?)\s+(update|modified|change|..?nderung).*?(\d\d\d\d|AM|PM|\d\d:\d\d|\d\d.\s*[A-Z]{3}.\s*(20)?00|\s+[A-Z]{3}\s+[A-Z]{3}\s+\d?\d\s+\d\d:\d\d:\d\d\s+\d\d(\d\d))(\s*\d?\d[\.:]\d\d(\s*[AP]M)?)?//goi;
   $file2=~s/(last|letzter?s?)\s+(update|modified|change|..?nderung).*?(\d\d\d\d|AM|PM|\d\d:\d\d|\d\d.\s*[A-Z]{3}.\s*(20)?00|\s+[A-Z]{3}\s+[A-Z]{3}\s+\d?\d\s+\d\d:\d\d:\d\d\s+\d\d(\d\d))(\s*\d?\d[\.:]\d\d(\s*[AP]M)?)?//goi;
   $file1=~s/\d*\s?Views since.*?\d\d\d+|\d+ days ago//goi;
   $file2=~s/\d*\s?Views since.*?\d\d\d+|\d+ days ago//goi;
   # unix time (9 digits in 1997; allow upto 12 digits) embedded in (mostly) alpha numeric string
   # should also catch combinations of time, $$, ... with identifiers
   # slow !!
   $file1=~s/($b)(${skipdateprefix}(?=.)[\w\.\-#]*?\d{9,12}[\w\.\-#]*)(?=$b)/$1/goi;
   $file2=~s/($b)(${skipdateprefix}(?=.)[\w\.\-#]*?\d{9,12}[\w\.\-#]*)(?=$b)/$1/goi;
   # 92-12-03, 2.3.2000 
   $file1=~s/($b)(\d?\d(\d\d)?[\-\.]\s*\d?\d[\-\.]\s*\d\d(\d\d)?)(?=$b)/$1/goi;
   $file2=~s/($b)(\d?\d(\d\d)?[\-\.]\s*\d?\d[\-\.]\s*\d\d(\d\d)?)(?=$b)/$1/goi;
   # 970403
   $file1=~s/($b)\d{6,}(?=$b)/$1/goi;
   $file2=~s/($b)\d{6,}(?=$b)/$1/goi;
   # Fri Aug 22 20:57:18 1997 
   $file1=~s/($b)([A-Z]{3} [A-Z]{3} \d{1,2} \d\d:\d\d:\d\d \d\d(\d\d)?)(?=$b)/$1/goi;
   $file2=~s/($b)([A-Z]{3} [A-Z]{3} \d{1,2} \d\d:\d\d:\d\d \d\d(\d\d)?)(?=$b)/$1/goi;
   # Mon, 19 Jun 2000 02:38:25 GMT
   $file1=~s/($b)([A-Z]{3},? \d{1,2} [A-Z]{3} \d\d(\d\d)?( \d\d:\d\d:\d\d)?)(?=$b)/$1/goi;
   $file2=~s/($b)([A-Z]{3},? \d{1,2} [A-Z]{3} \d\d(\d\d)?( \d\d:\d\d:\d\d)?)(?=$b)/$1/goi;
   # 24-?May-?2000 06:45? PM?
   $file1=~s/($b)(\d?\d[^\dA-Z]*[A-Z]{3}[^\dA-Z]*(19|20)?\d\d)(\s+\d?\d[\.:]\d\d([\.:]\d\d)?(\s*[AP]M)?)?(?=$b)/$1/goi;
   $file2=~s/($b)(\d?\d[^\dA-Z]*[A-Z]{3}[^\dA-Z]*(19|20)?\d\d)(\s+\d?\d[\.:]\d\d([\.:]\d\d)?(\s*[AP]M)?)?(?=$b)/$1/goi;
   # dd:dd(:dd)?
   $file1=~s/($b)(\d?\d[\.:]\d\d([\.:]\d\d)?(\s*[AP]M)?)?(?=$b)/$1/goi;
   $file2=~s/($b)(\d?\d[\.:]\d\d([\.:]\d\d)?(\s*[AP]M)?)?(?=$b)/$1/goi;
   # mar 29 2000
   $file1=~s/($b)([A-Z]{3}[^\dA-Z]*\d?\d)([^\dA-Z]*(19|20)?\d\d)?(?=$b)/$1/goi;
   $file2=~s/($b)([A-Z]{3}[^\dA-Z]*\d?\d)([^\dA-Z]*(19|20)?\d\d)?(?=$b)/$1/goi;

#print "\n\n$file1\n\n$file2\n\n";

}

# structure the dumps into paragraph lines
if (not $brief) {
   $file1=~s/[ \t]+/ /go;
   $file1=~s/(\S)[ \t]*\n[ \t]*(?!\[$linenoprefix:\d+\][\t ]*\n)(\S)/$1 $2/go;
   $file1=~s/_//mg; # Frontpage seems to have trouble with <i> here...
   $file1=~s/\n([\t ]*\n)+/\n/go;

   $file2=~s/[ \t]+/ /go;
   $file2=~s/(\S)[ \t]*\n[ \t]*(?!\[$linenoprefix:\d+\][\t ]*\n)(\S)/$1 $2/go;
   $file2=~s/_//mg; # Frontpage seems to have trouble with <i> here...
   $file2=~s/\n([\t ]*\n)+/\n/go;
  
   if ($word==1) {
      $file1=~s/\s+/\n/g;
      $file2=~s/\s+/\n/g;
   }
}

#print main::STDERR "restructured for diff\n";


# strip embedded line numbers and remember their original value in %lines
$file1=~s@(.*\n)@do {
   $line=$1; ++${lineno1};
   $lineno12=0; $lineno12=$1 if $line=~/\[$linenoprefix:(\d+)\]/;
   $line=~s/([\t ])*\[$linenoprefix:(\d+)\][\t ]*/do { $lines1{$lineno1}="$lineno12-$2"; "$1" }/gei;
   # strip empty lines
   $line="" if $line!~/\S/;
   $line
}@ge;
$file2=~s@(.*\n)@do {
   $line=$1; ++${lineno2};
   $lineno22=0; $lineno22=$1 if $line=~/\[$linenoprefix:(\d+)\]/;
   $line=~s/([\t ])*\[$linenoprefix:(\d+)\][\t ]*/do { $lines2{$lineno2}="$lineno22-$2"; "$1" }/gei;
   # strip empty lines
   $line="" if $line!~/\S/;
   $line
}@ge;

if ( $file1=~/\S/ and $file2!~/\S/ or 
     $file1!~/\S/ and $file2=~/\S/ ) {
   exit 1;
}

# diff the line-paragraph files
open(FH, ">$tmp.b1"); print FH $file1; close FH;
open(FH, ">$tmp.b2"); print FH $file2; close FH;
open(FH, "$diffcmd $tmp.b1 $tmp.b2 |"); $file=<FH>; close FH;
$rc=$?>>8; # save the return code of diff for our parent!
#print main::STDERR "$rc\n";


$file=~s/^([^\-\>\<])/\n$1/mgo;

# add real line numbers
if (%lines1) {
   $file=~s@^([^\-><\s].*)@do {
      $newline=$line=$1; 
      $newline=~s/[a-z].*//i;
      $newline=~s/(\d+)/$lines1{$1}/go;
      ($newline,$line)=($line, $line." ($newline");
      $newline=~s/.*[a-z]//i;
      $newline=~s/(\d+)/$lines2{$1}/go;
      $line=$line.":$newline)";
      $line=~s/-\d+,\d+-/,/go;
      $line
   }@geoim;
}

# strip spurious empty diffs
$file=~s@^([^\-><\s].*)\n\s*\n(?=[^\-><\s])@@geoim;

#print main::STDERR "diff completed: $rc\n";

# uncomment to print only > side
# $file=~s/^[^>].*\n//mg;
# $file=~s/^>//mg;

# here we could magically mix word and paragraph diffs...
# to better spot small changes

if ($diff and not $brief) {
#print main::STDERR "diff differing pars\n";
   # find differing words (sections < 60k!)
   $file=~s#^(((?:<.*\n)+)---\n((?:>.*\n)+))#do {
      $par=$1; $f1=$2; $f2=$3;
      $f1=~s/^</ /mgo; $f1=~s/\s+/ /go;
      $f2=~s/^>/ /mgo; $f2=~s/\s+/ /go;
      \#$f=" $f1 \n $f2 ";
      \# while ($f=~s! (.{20,}) (.*\n.*?) \1 ! ... $2 ... !go) { ; }
      $o=$o1=$o2="";
      \# 1. slow, greedy version; 60k limit (par's shouldn't be that long!)
      \#while ($f=~m! (\S.{20,}\b) (.*)\n\s*(.*?) \1 !) { 
      \#   $o1.=" $` ... "; $o2.="$3 ... "; $f=" $2 \n $'";
      \#   $o="< $o1 $2\n> $o2 $'\n";
      \#}
      \# 2. pipe word list to diff?
      \# 3. do it in without regexp?
      while ($f1 or $f2) { 
         \# find common stretch
         $found=$pos2=$pos1=0;
         l: while($f1=~/(\b\S.{$step}\w*\b)/go) {
            $test=$1; $pos1=pos($f1) - length($test);
            $pos2=index($f2,$test);
            $found=1 if $pos2>=0;
            last l if $found;
         }
         pos $f1 = 0;
	 if ($found) {
	    $pre1 =substr($f1,0,$pos1); 
            $post1=substr($f1,$pos1+$step); 
	    $pre2 =substr($f2,0,$pos2); 
            $post2=substr($f2,$pos2+$step); 

            \# right extend match
	    $j=0; for($i=0; $i<=length($post1)+1; $i++) {
               $c1=substr($post1,$i,1); $c2=substr($post2,$i,1);           
               if ($c1 ne $c2) {
                  if ($c1 xor $c2) {
                     $j=$i if $c1=~/$boundary/o or $c2=~/$boundary/o;
                  } elsif ($c1=~/$boundary/o and $c2=~/$boundary/o) {
                     $j=$i
                  }
                  last
               } elsif ($c1 and $c2) { 
                  $j=$i if $c1=~/$boundary/o;
               }
	    }
            if ($j) {
	       $post1=substr($post1,$j);
	       $post2=substr($post2,$j);
	    }
            \# cut differences to the right (left extend match)
            $j=0; for($i=1; $i<=length($pre1)+2; $i++) {
               $c1=substr($pre1,-$i,1); $c2=substr($pre2,-$i,1);              
               if ($c1 ne $c2) {
                  if ($c1 xor $c2) {
                     $j=$i if $c1=~/$boundary/o or $c2=~/$boundary/o;
                  } elsif ($c1=~/$boundary/o and $c2=~/$boundary/o) {
                     $j=$i
                  }
                  last
               } elsif ($c1 and $c2) {
                  $j=$i if $c1=~/$boundary/o; 
               }
            }
            if ($j) {
               $pre1=substr($pre1,0,-$j);
               $pre2=substr($pre2,0,-$j);
            }
	    \# cut differences to the left (should be called only at par'start)
            $j=0; for($i=0; $i<=length($pre1)+1; $i++) {
               $c1=substr($pre1,$i,1); $c2=substr($pre2,$i,1);               
               if ($c ne $c2) {
                  if ($c1 xor $c2) {
                     $j=$i if $c1=~/$boundary/o or $c2=~/$boundary/o;
                  } elsif ($c1=~/$boundary/o and $c2=~/$boundary/o) {
                     $j=$i
                  }
                  last
               } elsif ($c1 and $c2) {
                  $j=$i if $c1=~/$boundary/o;
               }
	    }
            if ($j) {
	       $pre1=substr($pre1,$j);
	       $pre2=substr($pre2,$j);
	    }

	    $pre1 =~s!^\s+!!o; $pre1 =~s!\s+$!!o;
	    $pre2 =~s!^\s+!!o; $pre2 =~s!\s+$!!o;
	    $post1=~s!^\s+!!o; $post1=~s!\s+$!!o;
	    $post2=~s!^\s+!!o; $post2=~s!\s+$!!o;
	    if ($pre1 or $pre2) { $o1.="$pre1 ... "; $o2.="$pre2 ... "; }
            $f1=$post1;
            $f2=$post2;
	 } elsif ($f1 eq $f2){
	    $f1=$f2="";
	 } else {
            $o1.=$f1; $o2.=$f2; 
	    $f1=$f2="";
         }
      }
      $o="< $o1\n> $o2\n" if $o1 or $o2;
      $o=~s! +\.\.\. +! ... !go;
      $f=$o if $o=~/\S/o;
      $par="" if 1==$diff;
      "$par\n$f\n"
   }#geoim;
   # strip "empty" pars (works only for -d)
   $file=~s#^[^><\s].*\n+([<>][\t \.]*\n)([<>][\t \.]*\n)+\s*##mgo;
   $file=~s#^[^><\s].*\n+([<>][\t \.]*\n)+\s*##mgo;
}

if ($brief) {
   $file=~s/<!--.*?-->//g; # any comment should be a paragraph unless it contains valid tags. then, we probably should keep it...
   
   # cleanup
   $ofile=$file;
   $file=~s/^[<>][\t ]*\n//gm;
   $file=~s/^[^<>].*\n//gm;
   $file=~s/\s+//gm;
#print main::STDERR "DIFFERENCES: $ofile\n";
   $rc=0; $rc=1 if $file; $file="";
}

#print main::STDERR "done\n";

# print differences
print $file;
if ($keep) {
   print "\n\n# rm /tmp/htmldiff*\n\n";
   system("ls -s $tmp*");
} else {
   unlink("$tmp", "$tmp.a1", "$tmp.a2", "$tmp.b1", "$tmp.b2");
}

#system ("ps -mp $$");

exit $rc;

#  ----------------------------------------------------------------

sub help {
   print <<EOF;
$0 [ARGS] file1 file2

version $version

diffs  two html pages ignoring most differences in tags and whitespaces.
Note that the return code is the one from (g)diff.

ARGS: 
 -d               diff differing paragraphs and list changed strings
 -D               as -d, list also differing paragraphs
 -k               keep temporary files
 -q               quick/quiet diff, change of tags is considered a valid 
                     difference (may find spurious changes)
 -Q               skip passing text through lynx
 -w               diff words instead of paragraph lines 
 -skipdate  PREF  delete datestrings before diff (use PREF as prefix in 
                  matching unix time-like timestamp for significant
                  speedup)
 -s STEP          stepsize for -d / -D matching of differences

EXAMPLE: 

# a fast test on differences between two versions both generated by COLLECT
$0 -q -skipdate COLLECT file1 file2 

# diff ignoring timestamps
$0 -q -skipdate '' file1 file2 

# diff 2 text files with different paragraph formatting
$0 -Q -d file1 file2

EOF
}
