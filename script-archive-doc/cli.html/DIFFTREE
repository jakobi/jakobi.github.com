#!/usr/bin/perl

# usage: $0 [opts] tree1 [tree2]
# diff or otherwise process two directory trees, e.g. to obtain changes 
# of a remote sites you mirror.

# 199XXXXX PJ        jakobi@acm.org -- initial version
# 20000703 PJ   0.2  
# copyright: (c) 2000-2009 jakobi@acm.org GPL v2 or later
my $version="0.2";


# shell: single-quoted filenames, rejecting '

$|=1;

# get args
args: while (1) {
   if ($ARGV[0] eq '-') { shift @ARGV; last args; }
   elsif ($ARGV[0] eq '-h'){ shift @ARGV; &help(); exit 1; }
   elsif ($ARGV[0] eq '-html'){ shift @ARGV; $html=1; }
   elsif ($ARGV[0] eq '-e'){ shift @ARGV; $_=shift; eval "$_"; die "$@" if $@; exit 1; }
   elsif ($ARGV[0] eq '-newer'){ shift @ARGV; push @op, ("newer", ""); $newer=1}
   elsif ($ARGV[0] eq '-skiperr'){ shift @ARGV; push @op, ("skiperr", ""); $skiperr=1; }
   elsif ($ARGV[0] eq '-cmp')  { shift @ARGV; push @op, ("cmp",shift); }
   elsif ($ARGV[0] eq '-diff') { shift @ARGV; push @op, ("diff",shift); }
   elsif ($ARGV[0] eq '-DIFF') { shift @ARGV; push @op, ("DIFF",shift); }
   elsif ($ARGV[0] eq '-cp') { shift @ARGV; $cp=1 }
   elsif ($ARGV[0] eq '-eval') { shift @ARGV; push @op, ("eval",shift); }
   elsif ($ARGV[0] eq '-grep') { shift @ARGV; push @op, ("grep",shift); }
   elsif ($ARGV[0] eq '-skipgrep') { shift @ARGV; push @op, ("skipgrep",shift); }
   elsif ($ARGV[0] eq '-name') { shift @ARGV; push @op, ("name",shift); }
   elsif ($ARGV[0] eq '-skipname') { shift @ARGV; push @op, ("skipname",shift); }
   elsif ($ARGV[0] eq '-v'){ shift @ARGV; $verbose++; }
   else{ last args; }
}
@op=("newer", "") if not @op;

if ($path1=shift) {
   if (-d $path1) {
      $base1="."
   } elsif (-f $path1 and $path1=~m@(.*)/(\S+)@) {
      $path1=$1; $base1=$2;
   } elsif (-f $path1 and not $path1=~m@/@) {
      $base1=$path1; $path1="."
   } else {
      undef $path1;
   }
}
if ($path2=shift) {
   if (-d $path2) {
      $base2="."
   } elsif (-f $path2 and $path2=~m@(.*)/(\S+)@) {
      $path2=$1; $base2=$2;
   } elsif (-f $path2 and not $path2=~m@/@) {
      $base2=$path2; $path2="."
   } elsif ($base1 eq "." and $path2) {
      # target does not exist?
      $base2="."; system "mkdir -p '$path2' 2>/dev/null";
   }
}



# get files
chomp(@files=`( ( test ! -z "$path1" && cd '$path1' && find '$base1' -type f -print ) ;\
                ( test ! -z "$path2" && cd '$path2' && find '$base2' -type f -print ) ) | \
              sort | uniq`);
print STDERR "DIR $path1 - $base1\n" if $verbose>1;
print STDERR "DIR $path2 - $base2\n" if $verbose>1;
exit 1 if not -d $path1;


print STDERR join("\n", @files), "\n\n" if $verbose>1;


if ($html) {
   chomp($date=`date +%Y%m%d%H%M`);
   $title="DIFFTREE (stage/new) $path1/$base1 - $path2/$base2 (mirror/prev) on $date";
   &report("<HTML><TITLE>$title</TITLE>\n<BODY>\n<H1>$title</H1>\n");
}


# evaluate files
file: foreach $file (@files) {
   print STDERR "# processing file $file\n" if $verbose;
   @myop=(@op, "end", "");
   $_=""; $rc=0; $out=""; $tmp="";
   
   if ($file=~/\\/ or $file=~/'/) {
      print STDERR "# rejecting illegal $file\n";
      next;
   }
      
   @stat1=stat "$path1/$file";
   @stat2=stat "$path2/$file";
   
   # tests
   # set $@ :-)
   op: while(@myop) {
      ($op, $opargs)=(shift @myop, shift @myop);
      print STDERR "#   op $op with args $opargs\n" if $verbose>1;

      # get whole file file
      &openfile if $op=~/^(skiperr|eval|grep|skipgrep|DIFF)$/;

      if      ($op eq "newer") {
         last op if not $stat1[9]>$stat2[9];
         $out.=&enc("newer\n");
      
      } elsif ($op eq "skiperr") {
         if (length($_)<1000 and 
                 ( /(server|internal|internal\s+server)\s+error/i and 
                   /squid|woffle/i or
		   /wwwoffle request/i and
		   /WWWOFFLE.*WWWOFFLE/ )) {
	    $out.=&enc("skiperr\n");
	    last op;
	 };
      
      } elsif ($op eq "skipname") {
         last op if $file=~/opargs/i;
      
      } elsif ($op eq "name") {
         last op if $file!~/$opargs/i;
      
      } elsif ($op eq "eval") {
         eval "$opargs";
         last op if not $rc;
	 $out.=&enc($rc);
      
      } elsif ($op eq "grep") {
         last op if $_=~/$opargs/si;
      
      } elsif ($op eq "skipgrep") {
         last op if $_!~/$opargs/si;
      
      } elsif ($op eq "cmp") {
         if (@stat1 and @stat2) {
	    $tmp=`cmp $opargs '$path1/$file' '$path2/$file'`;
            last op if not $?;
            $out.=&enc($tmp);
         }
      
      } elsif ($op eq "diff") {
         if (@stat1 and @stat2) {
            $tmp=`diff $opargs '$path1/$file' '$path2/$file'`;
            last op  if not $?;
            print STDERR "diff returns ", $?>>8 if $? and $verbose;
            $out.=&enc($tmp);
         }
      
      } elsif ($op eq "DIFF") {
         # filter binary files
         last op if /\0/;
         if (@stat1 and @stat2) {
	    my($tmp,$a,$b);
	    $tmp=`DIFF $opargs '$path1/$file' '$path2/$file'`;
	    $tmp=~s/^([><])[\t ]*(.*\n)/do{($a,$b)=($1,$2);$b=~s@(.{1,70}\S*[\t ]*)@$a $1\n@g; $b=~s@\n+$@@g; "$b\n"}/mge;
            last op if not $?;
            print STDERR "DIFF returns ", $?>>8 if $? and $verbose;
            $out.=&enc($tmp);
         }
      
      } elsif ($op eq "end") {
         $match++;
         if (@stat1 and @stat2) {
            $out=&enc("matching file: $file\n").$out;  
            print STDERR "matching file: $file\n" if $verbose;
         } elsif (@stat1) {
            $out=&enc("matching file: $file (only in source)\n").$out;
            print STDERR "matching file: $file (only in source)\n" if $verbose;
         } else {
            $out="";
         }
         if ($out) {
            if ($html) {
               $out=~s/(matching file: )([^\s<>]+)/$1<A HREF="$2">$2<\/A>/;
               &report("$out\n<hr>\n");
            } else {
               print "$out# ------------------------\n";
            }
         }
      
      } else {
          warn "op $op unknown!!!";
      }
warn "$op: error in $opargs: $@" if $@;
   }
warn "$op: error in $opargs: $@" if $@;
   
   # remember for cpio?
   if ($cp) {
      if ($skiperr) {
         &openfile;
         next file if length($_)<1000 and 
            (/(server|internal|internal\s+server)\s+error/i) and 
            (/squid|wwwoffle/i);
      }
      next file if not @stat1;   
      if ($op eq "newer" and @stat2) {
         next file if not $stat1[9]>$stat2[9];
      }

      # now cpio ANYTHING ELSE FROM STAGE TO PERMANENT DIR (but do not necessarily report it)

      # skip some files, such as webcopy temp files, vim swap files, etc
      next if $file=~m@/\.?[^\s/]+.sw.$|/W\d+\.log$|/W\d+\.tmp$@;

      push @copylist, $file;
   }
   
}



# cpio?
if (@copylist) {
   open(FH, "|( ( cd $path1 && cpio -o ) | ( cd $path2 && cpio -imdu ) ) 1>&2");
   print FH join("\n", @copylist); print FH "\n";
   close FH;
   print STDERR "\nCopying:\n" . join("\n", @copylist) . "\n\n" # if $verbose;
}



&report("</BODY></HTML>\n") if $html;
print $report if $report and $match;

exit 0;

# -----------------------------------------------------------

sub report {
   if ($verbose) {
      print STDERR $_[0];
   }
   $report.=$_[0];
}
               
sub enc {
   my ($out)=@_;
   if ($html) {
      $out=~s/\&/\&amp;/g;
      $out=~s/</\&lt;/g;
      $out=~s/>/\&gt;/g;
      $out=~s/$/<BR>/mg;
   }
   $out;
}
         
sub openfile {
   if (not $_) {
      local ($/); 
      undef $/;
      open(FH,"<$path1/$file");
      $_=<FH>;
      close FH;
   }
}
         
sub help {
   print <<EOF;
DIFFTREE [OPTIONS] PATH1 [PATH2] 

version: $version

run operation against files of path1 and corresponding files in path2,
optionally  copying files (newer files if -newer, except apparent http
error if -skiperr).  Reports matching files and optionally differences
on stdout.

Note  the restriction that the files must have identical names, so use
DIFF, diff, cmp, ...  directly to  merely  diff  two  files  directly.
Mirroring remote sites requires an additional staging directory, as we
may  require  the  previous  version  for  some operations.  Note that
deletions (or maybe missing files due to  network  problems)  are  NOT
propagated by -cp.


Options:
  -e   expr               eval
  -h                      help
  -v                      verbosity
  -cp                     copy new files to PATH2 afterwards
  -html                   output report in html
  -skiperr                skip files that appear to be http error messages

Test options, anded:
  -newer                  report only if file in path1 is newer
  -[skip]name  regex      report only files with matching (source) names
  -[skip]grep  regex      report only files with matching (source) content
  -cmp         cmp-args   report only if cmp differs
  -diff        diff-args  report only differences
  -DIFF        DIFF-args  report only DIFFerrences (HTML-conscious)

Examples:
  - DIFFTREE -cp -newer -name "htm" -DIFF "" mirror-stage/www.cherryh.com  mirror/www.cherryh.com
    copy newer files to mirror/www.cherryh.com, reporting differences of
    html files. Useful e.g. after mirroring the site to mirror-stage.
    Add -html to obtain report in html formatting.
  - for mirroring, use: wget -t -c -w 1 -x URL or
    webcopy -d -r -a -u -v -f -t1 URL 
  - mirroring is only affected by skiperr and newer,
    reporting is affected by all options
EOF
}
